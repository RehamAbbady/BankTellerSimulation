/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BankTellerProblem;

import java.awt.Color;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Reham abbady
 */
public class BankTellerGUI extends javax.swing.JFrame {

    /**
     * Creates new form myGui
     */
    public BankTellerGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField13 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("10");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("25");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setText("0.09");

        jTextField4.setText("0.17");

        jTextField5.setText("0.27");

        jTextField6.setText("0.2");

        jTextField7.setText("0.15");
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jTextField8.setText("0.12");

        jTextField9.setText("0.2");

        jTextField10.setText("0.4");

        jTextField11.setText("0.28");
        jTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11ActionPerformed(evt);
            }
        });

        jTextField12.setText("0.12");

        jLabel1.setText("enter arrival time");

        jLabel2.setText("service time");

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Custmer", "Enter Arrival Time", "Arrival Time", "Service Time", "Time service begins", "Waiting Time in queue", "Time service ends", "Time Spent", "Idle"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextField13.setText("1");
        jTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField13ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Custmer", "Enter Arrival Time", "Arrival Time", "Service Time", "Time service begins", "Waiting Time in queue", "Time service ends", "Time Spent", "Idle"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jLabel3.setText("Runs");

        jLabel4.setText("costumers ");

        jLabel5.setText("waiting queue");

        jLabel6.setText("First Teller");

        jLabel7.setText("Second Teller");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                                    .addComponent(jTextField1))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField8)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField6)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(192, 192, 192)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField12, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jTextField9)
                                            .addComponent(jTextField10)
                                            .addComponent(jTextField11)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(381, 381, 381)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jButton1))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(163, 163, 163))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 956, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 956, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(472, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(504, 504, 504)
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jButton1)))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed
    public void populateTable(ArrayList<Service> x) {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        int tableRow = x.size();
        Object row[] = new Object[tableRow];

        for (int i = 0; i < x.size(); i++) {

            row[0] = x.get(i).serviceID;
            row[1] = x.get(i).interarrivalTime;
            row[2] = x.get(i).arrivalTime;
            row[3] = x.get(i).serviceTime;
            row[4] = x.get(i).timeServiceBegins;
            row[5] = x.get(i).waitingTime;
            row[6] = x.get(i).timeServiceEnds;
            row[7] = x.get(i).timeSpentInSystem;
            row[8] = x.get(i).idleTime;

            model.addRow(row);

        }

    }

    public void populateTable1(ArrayList<Service> y) {

        DefaultTableModel model1 = (DefaultTableModel) jTable3.getModel();

        int tableRow = y.size();
        Object row[] = new Object[tableRow];

        for (int i = 0; i < y.size(); i++) {

            row[0] = y.get(i).serviceID;
            row[1] = y.get(i).interarrivalTime;
            row[2] = y.get(i).arrivalTime;
            row[3] = y.get(i).serviceTime;
            row[4] = y.get(i).timeServiceBegins;
            row[5] = y.get(i).waitingTime;
            row[6] = y.get(i).timeServiceEnds;
            row[7] = y.get(i).timeSpentInSystem;
            row[8] = y.get(i).idleTime;

            model1.addRow(row);

        }

    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                ArrayList<Integer> maxQueueSize = new ArrayList<>();
//take input values from gui and parse it from string to its correct data type

        int runs = Integer.parseInt(jTextField1.getText());
        int numberOfTrials = Integer.parseInt(jTextField2.getText());

        double eat11 = Double.parseDouble(jTextField3.getText());

        double eat22 = Double.parseDouble(jTextField4.getText());

        double eat33 = Double.parseDouble(jTextField5.getText());

        double eat44 = Double.parseDouble(jTextField6.getText());

        double eat55 = Double.parseDouble(jTextField7.getText());

        double eat66 = Double.parseDouble(jTextField8.getText());

        double st11 = Double.parseDouble(jTextField9.getText());
        double st22 = Double.parseDouble(jTextField10.getText());
        double st33 = Double.parseDouble(jTextField11.getText());
        double st44 = Double.parseDouble(jTextField12.getText());

        int waitingQueue = Integer.parseInt(jTextField13.getText()) + 1;

        //---------------------------------------------------
        ArrayList<Service> driveIn = new ArrayList<>();
        ArrayList<Service> bank = new ArrayList<>();
        ArrayList<Integer> generatedInterarrivalTimes = new ArrayList<>();
        ArrayList<Integer> generatedServiceTimes = new ArrayList<>();
        ArrayList<Integer> interArrivalTime = new ArrayList<>();
        ArrayList<Integer> serviceTime = new ArrayList<>();

        Service s1 = new Service();
        ArrayList<Double> prop = new ArrayList<>();
        prop.add(st11);
        prop.add(st22);
        prop.add(st33);
        prop.add(st44);

        ArrayList<Double> prop1 = new ArrayList<>();
        prop1.add(eat11);
        prop1.add(eat22);
        prop1.add(eat33);
        prop1.add(eat44);
        prop1.add(eat55);
        prop1.add(eat66);

        // -------------------------------------------------------------------------------------------
        int ID = 0;
        int IAT = 0;//inter arrival time
        int AT = 0;//arrival time
        int TSB = 0;// time service begins
        int ST = 0;//service time
        int WT = 0;//waiting time
        int TSE = 0;//time service ends
        int TS = 0;//time spent in the system
        int idle = 0;//idle time
        int count_d = 0;//counter for the drive in teller
        int count_b = 0; //counter for the bank teller

        //---------------------------------------------------------------------------------------------
        int allArrivalTimes[] = new int[numberOfTrials];

        for (int j = 0; j < runs; j++) {
            generatedInterarrivalTimes = s1.generateInterArrivalTime(numberOfTrials, 89);
            generatedServiceTimes = s1.generateSeviceTime(numberOfTrials, 89);

            interArrivalTime = s1.calculateInterArrivalTime(generatedInterarrivalTimes, s1.calculateRanges(s1.calculateCDF(prop1)));
            serviceTime = s1.calculateServiceTime(generatedServiceTimes, s1.calculateRanges(s1.calculateCDF(prop)));
            for (int i = 0; i < numberOfTrials; i++) {

                if (i == 0) {
                    allArrivalTimes[i] = 0;
                } else {
                    allArrivalTimes[i] = allArrivalTimes[i - 1] + interArrivalTime.get(i);
                }

            }
            for (int i = 0; i < numberOfTrials; i++) {

                if (i == 0) {

                    s1.setServiceID(i + 1);
                    s1.setInterarrivalTime(interArrivalTime.get(i));
                    s1.setArrivalTime(i);
                    s1.setServiceTime(serviceTime.get(i));
                    s1.setTimeServiceBegins(i);
                    s1.setWaitingTime(i);
                    s1.setTimeServiceEnds(serviceTime.get(i));
                    s1.setTimeSpentInSystem(serviceTime.get(i));
                    driveIn.add(s1);
                    count_d++;

                } else if (i == 1) {

                    ID = i + 1;
                    IAT = interArrivalTime.get(i);
                    AT = s1.arrivalTime(IAT, driveIn.get(i - 1).arrivalTime);
                    ST = serviceTime.get(i);
                    TSB = s1.timeServiceBegins(driveIn.get(i - 1).timeServiceEnds, AT);
                    WT = s1.waitingTime(TSB, AT);
                    TSE = s1.timeServiceEnds(TSB, ST);
                    TS = s1.timeSpent(WT, ST);
                    idle = s1.idle(driveIn.get(i - 1).timeServiceEnds, AT);

                    Service ns = new Service(ID, IAT, AT, ST, TSB, WT, TSE, TS, idle);
                    driveIn.add(ns);

                    count_d++;

                } else if (i == 2 && waitingQueue == 3) {
                    ID = i + 1;
                    IAT = interArrivalTime.get(i);
                    AT = s1.arrivalTime(IAT, driveIn.get(i - 1).arrivalTime);
                    ST = serviceTime.get(i);
                    TSB = s1.timeServiceBegins(driveIn.get(i - 1).timeServiceEnds, AT);
                    WT = s1.waitingTime(TSB, AT);
                    TSE = s1.timeServiceEnds(TSB, ST);
                    TS = s1.timeSpent(WT, ST);
                    idle = s1.idle(driveIn.get(i - 1).timeServiceEnds, AT);

                    Service ns = new Service(ID, IAT, AT, ST, TSB, WT, TSE, TS, idle);
                    driveIn.add(ns);

                    count_d++;

                } else {

                    AT = allArrivalTimes[i];

                    if (AT < driveIn.get(count_d - waitingQueue).timeServiceEnds && count_b == 0) {

                        ID = i + 1;//count_d + 1;
                        IAT = interArrivalTime.get(i);
                        AT = s1.arrivalTime(IAT, driveIn.get(count_d - 1).arrivalTime);
                        ST = serviceTime.get(i);
                        TSB = AT;
                        WT = s1.waitingTime(TSB, AT);
                        TSE = s1.timeServiceEnds(TSB, ST);
                        TS = s1.timeSpent(WT, ST);
                        idle = AT;

                        Service b1 = new Service(ID, IAT, AT, ST, TSB, WT, TSE, TS, idle);
                        bank.add(b1);
                        count_b++;

                    } else if (AT < driveIn.get(count_d - waitingQueue).timeServiceEnds && count_b != 0) {

                        ID = i + 1;//count_d + 1;
                        IAT = interArrivalTime.get(i);
                        AT = s1.arrivalTime(IAT, driveIn.get(count_d - 1).arrivalTime);
                        ST = serviceTime.get(i);
                        TSB = s1.timeServiceBegins(bank.get(count_b - 1).timeServiceEnds, AT);
                        WT = s1.waitingTime(TSB, AT);
                        TSE = s1.timeServiceEnds(TSB, ST);
                        TS = s1.timeSpent(WT, ST);
                        idle = s1.idle(bank.get(count_b - 1).timeServiceEnds, AT);

                        Service b1 = new Service(ID, IAT, AT, ST, TSB, WT, TSE, TS, idle);
                        bank.add(b1);
                        count_b++;

                    } else {

                        ID = i + 1;//count_d + 1;
                        IAT = interArrivalTime.get(i);
                        AT = s1.arrivalTime(IAT, driveIn.get(count_d - 1).arrivalTime);
                        ST = serviceTime.get(i);
                        TSB = s1.timeServiceBegins(driveIn.get(count_d - 1).timeServiceEnds, AT);
                        WT = s1.waitingTime(TSB, AT);
                        TSE = s1.timeServiceEnds(TSB, ST);
                        TS = s1.timeSpent(WT, ST);
                        idle = s1.idle(driveIn.get(count_d - 1).timeServiceEnds, AT);

                        Service b1 = new Service(ID, IAT, AT, ST, TSB, WT, TSE, TS, idle);
                        driveIn.add(b1);

                        count_d++;

                    }

                }

            }
            maxQueueSize.add(count_b);
            count_b = 0;
            count_d = 0;

        }

        populateTable(driveIn);
        populateTable1(bank);
        System.out.print(bank);
        
        

        //--------------------------------------
      //pie chart 
        DefaultPieDataset myDataset=new DefaultPieDataset();
        myDataset.setValue("number of custmers in the drive in", driveIn.size());
        myDataset.setValue("number of custmers in the bank", bank.size());
        JFreeChart c=ChartFactory.createPieChart("number of custmers", myDataset, true, true, true);
        PiePlot p=(PiePlot)c.getPlot();
        ChartFrame f=new ChartFrame("pie chart",c);
        f.setVisible(true);
        f.setSize(600,600);
        
        //bar chart
        DefaultCategoryDataset cat= new DefaultCategoryDataset();
        for(int i=0;i<runs;i++){
        cat.addValue(maxQueueSize.get(i),"max queue size","run "+i);
        }
        JFreeChart bar=ChartFactory.createBarChart("maximum queue size in the  bank in each run", "run ", "max queue size", cat,PlotOrientation.VERTICAL,true,true,false);
        CategoryPlot plot=bar.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);
        ChartFrame ff=new ChartFrame("max queue size in bank",bar,true);
        ff.setVisible(true);
        ff.setSize(500,500);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField13ActionPerformed

    private void jTextField11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField11ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BankTellerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BankTellerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BankTellerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BankTellerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BankTellerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
